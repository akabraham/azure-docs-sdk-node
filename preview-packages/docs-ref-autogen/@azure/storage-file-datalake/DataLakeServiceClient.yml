### YamlMime:TSType
name: DataLakeServiceClient
uid: '@azure/storage-file-datalake.DataLakeServiceClient'
package: '@azure/storage-file-datalake'
summary: |-
  DataLakeServiceClient allows you to manipulate Azure
  Data Lake service resources and file systems. The storage account provides
  the top-level namespace for the Data Lake service.
fullName: DataLakeServiceClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'DataLakeServiceClient(string, Pipeline)'
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.constructor_1'
    package: '@azure/storage-file-datalake'
    summary: Creates an instance of DataLakeServiceClient from url and pipeline.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new DataLakeServiceClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: |-
            A Client string pointing to Azure Storage data lake service, such as
                                "https://myaccount.dfs.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net?sasString".
        - id: pipeline
          type: <xref uid="@azure/storage-file-datalake.Pipeline" />
          description: |
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      DataLakeServiceClient(string, StorageSharedKeyCredential |
      AnonymousCredential | TokenCredential, StoragePipelineOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.constructor'
    package: '@azure/storage-file-datalake'
    summary: Creates an instance of DataLakeServiceClient from url.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new DataLakeServiceClient(url: string, credential?:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        options?: StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A Client string pointing to Azure Storage data lake service, such as
                                "https://myaccount.dfs.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.dfs.core.windows.net?sasString".
        - id: credential
          type: >-
            <xref uid="@azure/storage-file-datalake.StorageSharedKeyCredential"
            /> | <xref uid="@azure/storage-file-datalake.AnonymousCredential" />
            | TokenCredential
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the `@azure/identity` package to authenticate
            requests to the service. You can also provide an object that
            implements the TokenCredential interface. If not specified,
            AnonymousCredential is used.
        - id: options
          type: <xref uid="@azure/storage-file-datalake.StoragePipelineOptions" />
          description: |
            Optional. Options to configure the HTTP pipeline.
properties:
  - name: accountName
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.accountName'
    package: '@azure/storage-file-datalake'
    summary: ''
    fullName: accountName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        type: string
        description: ''
  - name: credential
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.credential'
    package: '@azure/storage-file-datalake'
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the `@azure/identity` package to authenticate requests to the
      service. You can also provide an object that implements the
      TokenCredential interface. If not specified, AnonymousCredential is used.
    fullName: credential
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        type: >-
          <xref uid="@azure/storage-file-datalake.StorageSharedKeyCredential" />
          | <xref uid="@azure/storage-file-datalake.AnonymousCredential" /> |
          TokenCredential
        description: ''
  - name: url
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.url'
    package: '@azure/storage-file-datalake'
    summary: Encoded URL string value.
    fullName: url
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        type: string
        description: ''
methods:
  - name: 'fromConnectionString(string, StoragePipelineOptions)'
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.fromConnectionString'
    package: '@azure/storage-file-datalake'
    summary: Creates an instance of DataLakeServiceClient from connection string.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromConnectionString(connectionString: string, options?:
        StoragePipelineOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: options
          type: <xref uid="@azure/storage-file-datalake.StoragePipelineOptions" />
          description: |
            Optional. Options to configure the HTTP pipeline.
      return:
        type: <xref uid="@azure/storage-file-datalake.DataLakeServiceClient" />
        description: ''
  - name: >-
      generateAccountSasUrl(Date, AccountSASPermissions, string,
      ServiceGenerateAccountSasUrlOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.generateAccountSasUrl'
    package: '@azure/storage-file-datalake'
    summary: >
      Only available for DataLakeServiceClient constructed with a shared key
      credential.

      Generates an account Shared Access Signature (SAS) URI based on the client
      properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateAccountSasUrl(expiresOn?: Date, permissions?:
        AccountSASPermissions, resourceTypes?: string, options?:
        ServiceGenerateAccountSasUrlOptions)
      parameters:
        - id: expiresOn
          type: Date
          description: >-
            Optional. The time at which the shared access signature becomes
            invalid. Default to an hour later if not specified.
        - id: permissions
          type: <xref uid="@azure/storage-file-datalake.AccountSASPermissions" />
          description: Specifies the list of permissions to be associated with the SAS.
        - id: resourceTypes
          type: string
          description: >-
            Specifies the resource types associated with the shared access
            signature.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.ServiceGenerateAccountSasUrlOptions"
            />
          description: Optional parameters.
      return:
        type: string
        description: >-
          An account SAS URI consisting of the URI to the resource represented
          by this client, followed by the generated SAS token.
  - name: getFileSystemClient(string)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.getFileSystemClient'
    package: '@azure/storage-file-datalake'
    summary: 'Creates a <xref:DataLakeFileSystemClient> object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getFileSystemClient(fileSystemName: string)'
      parameters:
        - id: fileSystemName
          type: string
          description: |
            File system name.
      return:
        type: <xref uid="@azure/storage-file-datalake.DataLakeFileSystemClient" />
        description: ''
  - name: getProperties(ServiceGetPropertiesOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.getProperties'
    package: '@azure/storage-file-datalake'
    summary: >-
      Gets the properties of a storage accountâ€™s Blob service endpoint,
      including properties

      for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getProperties(options?: ServiceGetPropertiesOptions)'
      parameters:
        - id: options
          type: ServiceGetPropertiesOptions
          description: Options to the Service Get Properties operation.
      return:
        type: Promise&lt;DataLakeServiceGetPropertiesResponse&gt;
        description: Response data for the Service Get Properties operation.
  - name: 'getUserDelegationKey(Date, Date, ServiceGetUserDelegationKeyOptions)'
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.getUserDelegationKey'
    package: '@azure/storage-file-datalake'
    summary: >
      ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).

      Retrieves a user delegation key for the Data Lake service. This is only a
      valid operation when using

      bearer token authentication.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getUserDelegationKey(startsOn: Date, expiresOn: Date, options?:
        ServiceGetUserDelegationKeyOptions)
      parameters:
        - id: startsOn
          type: Date
          description: >-
            The start time for the user delegation SAS. Must be within 7 days of
            the current time.
        - id: expiresOn
          type: Date
          description: >-
            The end time for the user delegation SAS. Must be within 7 days of
            the current time.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.ServiceGetUserDelegationKeyOptions"
            />
          description: |
            -
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-file-datalake.ServiceGetUserDelegationKeyResponse"
          />&gt;
        description: ''
  - name: listFileSystems(ServiceListFileSystemsOptions)
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.listFileSystems'
    package: '@azure/storage-file-datalake'
    summary: >
      Returns an async iterable iterator to list all the file systems

      under the specified account.

      .byPage() returns an async iterable iterator to list the file systems in
      pages.


      Example using `for await` syntax:


      ```js

      let i = 1;

      for await (const fileSystem of serviceClient.listFileSystems()) {
        console.log(`FileSystem ${i++}: ${fileSystem.name}`);
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      const iter = serviceClient.listFileSystems();

      let fileSystemItem = await iter.next();

      while (!fileSystemItem.done) {
        console.log(`FileSystem ${i++}: ${fileSystemItem.value.name}`);
        fileSystemItem = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const response of serviceClient.listFileSystems().byPage({
      maxPageSize: 20 })) {
        if (response.fileSystemItems) {
          for (const fileSystem of response.fileSystemItems) {
            console.log(`FileSystem ${i++}: ${fileSystem.name}`);
          }
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = serviceClient.listFileSystems().byPage({ maxPageSize: 2 });

      let response = (await iterator.next()).value;


      // Prints 2 file system names

      if (response.fileSystemItems) {
        for (const fileSystem of response.fileSystemItems) {
          console.log(`FileSystem ${i++}: ${fileSystem.name}`);
        }
      }


      // Gets next marker

      let marker = response.continuationToken;

      // Passing next marker as continuationToken

      iterator = serviceClient
        .listContainers()
        .byPage({ continuationToken: marker, maxPageSize: 10 });
      response = (await iterator.next()).value;


      // Prints 10 file system names

      if (response.fileSystemItems) {
        for (const fileSystem of response.fileSystemItems) {
           console.log(`FileSystem ${i++}: ${fileSystem.name}`);
        }
      }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listFileSystems(options?: ServiceListFileSystemsOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.ServiceListFileSystemsOptions" />
          description: |
            -
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/storage-file-datalake.FileSystemItem" />, <xref
          uid="@azure/storage-file-datalake.ServiceListFileSystemsSegmentResponse"
          />&gt;
        description: ''
  - name: 'setProperties(DataLakeServiceProperties, ServiceSetPropertiesOptions)'
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.setProperties'
    package: '@azure/storage-file-datalake'
    summary: >-
      Sets properties for a storage accountâ€™s Blob service endpoint, including
      properties

      for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft
      delete settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setProperties(properties: DataLakeServiceProperties, options?:
        ServiceSetPropertiesOptions)
      parameters:
        - id: properties
          type: DataLakeServiceProperties
          description: '-'
        - id: options
          type: ServiceSetPropertiesOptions
          description: Options to the Service Set Properties operation.
      return:
        type: Promise&lt;ServiceSetPropertiesResponse&gt;
        description: Response data for the Service Set Properties operation.
  - name: 'undeleteFileSystem(string, string, ServiceUndeleteFileSystemOptions)'
    uid: '@azure/storage-file-datalake.DataLakeServiceClient.undeleteFileSystem'
    package: '@azure/storage-file-datalake'
    summary: >-
      Restore a previously deleted File System.

      This API is only functional if Container Soft Delete is enabled for the
      storage account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function undeleteFileSystem(deletedFileSystemName: string,
        deleteFileSystemVersion: string, options?:
        ServiceUndeleteFileSystemOptions)
      parameters:
        - id: deletedFileSystemName
          type: string
          description: The name of the source File System.
        - id: deleteFileSystemVersion
          type: string
          description: The new name of the File System.
        - id: options
          type: >-
            <xref
            uid="@azure/storage-file-datalake.ServiceUndeleteFileSystemOptions"
            />
          description: |
            Options to configure File System Restore operation.
      return:
        type: Promise&lt;Object&gt;
        description: ''
extends: <xref uid="@azure/storage-file-datalake.StorageClient" />
