### YamlMime:TSType
name: BlobServiceClient
uid: '@azure/storage-blob.BlobServiceClient'
package: '@azure/storage-blob'
summary: >-
  A BlobServiceClient represents a Client to the Azure Storage Blob service
  allowing you

  to manipulate blob containers.
fullName: BlobServiceClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'BlobServiceClient(string, Pipeline)'
    uid: '@azure/storage-blob.BlobServiceClient.constructor_1'
    package: '@azure/storage-blob'
    summary: Creates an instance of BlobServiceClient.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new BlobServiceClient(url: string, pipeline: Pipeline)'
      parameters:
        - id: url
          type: string
          description: |-
            A Client string pointing to Azure Storage blob service, such as
                                "https://myaccount.blob.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.blob.core.windows.net?sasString".
        - id: pipeline
          type: <xref uid="@azure/storage-blob.Pipeline" />
          description: |
            Call newPipeline() to create a default
                                       pipeline, or provide a customized pipeline.
  - name: >-
      BlobServiceClient(string, StorageSharedKeyCredential | AnonymousCredential
      | TokenCredential, StoragePipelineOptions)
    uid: '@azure/storage-blob.BlobServiceClient.constructor'
    package: '@azure/storage-blob'
    summary: Creates an instance of BlobServiceClient.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new BlobServiceClient(url: string, credential?:
        StorageSharedKeyCredential | AnonymousCredential | TokenCredential,
        options?: StoragePipelineOptions)
      parameters:
        - id: url
          type: string
          description: |-
            A Client string pointing to Azure Storage blob service, such as
                                "https://myaccount.blob.core.windows.net". You can append a SAS
                                if using AnonymousCredential, such as "https://myaccount.blob.core.windows.net?sasString".
        - id: credential
          type: >-
            <xref uid="@azure/storage-blob.StorageSharedKeyCredential" /> |
            <xref uid="@azure/storage-blob.AnonymousCredential" /> |
            TokenCredential
          description: >-
            Such as AnonymousCredential, StorageSharedKeyCredential or any
            credential from the `@azure/identity` package to authenticate
            requests to the service. You can also provide an object that
            implements the TokenCredential interface. If not specified,
            AnonymousCredential is used.
        - id: options
          type: <xref uid="@azure/storage-blob.StoragePipelineOptions" />
          description: >
            Optional. Options to configure the HTTP pipeline.


            Example using DefaultAzureCredential from `@azure/identity`:


            ```js

            const account = "<storage account name>";


            const defaultAzureCredential = new DefaultAzureCredential();


            const blobServiceClient = new BlobServiceClient(
              `https://${account}.blob.core.windows.net`,
              defaultAzureCredential
            );

            ```


            Example using an account name/key:


            ```js

            const account = "<storage account name>"

            const sharedKeyCredential = new StorageSharedKeyCredential(account,
            "<account key>");


            const blobServiceClient = new BlobServiceClient(
              `https://${account}.blob.core.windows.net`,
              sharedKeyCredential
            );

            ```
properties:
  - name: accountName
    uid: '@azure/storage-blob.BlobServiceClient.accountName'
    package: '@azure/storage-blob'
    summary: ''
    fullName: accountName
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'accountName: string'
      return:
        type: string
        description: ''
  - name: credential
    uid: '@azure/storage-blob.BlobServiceClient.credential'
    package: '@azure/storage-blob'
    summary: >-
      Such as AnonymousCredential, StorageSharedKeyCredential or any credential
      from the `@azure/identity` package to authenticate requests to the
      service. You can also provide an object that implements the
      TokenCredential interface. If not specified, AnonymousCredential is used.
    fullName: credential
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        credential: StorageSharedKeyCredential | AnonymousCredential |
        TokenCredential
      return:
        type: >-
          <xref uid="@azure/storage-blob.StorageSharedKeyCredential" /> | <xref
          uid="@azure/storage-blob.AnonymousCredential" /> | TokenCredential
        description: ''
  - name: url
    uid: '@azure/storage-blob.BlobServiceClient.url'
    package: '@azure/storage-blob'
    summary: Encoded URL string value.
    fullName: url
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'url: string'
      return:
        type: string
        description: ''
methods:
  - name: 'createContainer(string, ContainerCreateOptions)'
    uid: '@azure/storage-blob.BlobServiceClient.createContainer'
    package: '@azure/storage-blob'
    summary: Create a Blob container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createContainer(containerName: string, options?:
        ContainerCreateOptions)
      parameters:
        - id: containerName
          type: string
          description: Name of the container to create.
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerCreateOptions" />
          description: Options to configure Container Create operation.
      return:
        type: Promise&lt;Object&gt;
        description: Container creation response and the corresponding container client.
  - name: 'deleteContainer(string, ContainerDeleteMethodOptions)'
    uid: '@azure/storage-blob.BlobServiceClient.deleteContainer'
    package: '@azure/storage-blob'
    summary: Deletes a Blob container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteContainer(containerName: string, options?:
        ContainerDeleteMethodOptions)
      parameters:
        - id: containerName
          type: string
          description: Name of the container to delete.
        - id: options
          type: <xref uid="@azure/storage-blob.ContainerDeleteMethodOptions" />
          description: Options to configure Container Delete operation.
      return:
        type: >-
          Promise&lt;<xref uid="@azure/storage-blob.ContainerDeleteResponse"
          />&gt;
        description: Container deletion response.
  - name: 'findBlobsByTags(string, ServiceFindBlobByTagsOptions)'
    uid: '@azure/storage-blob.BlobServiceClient.findBlobsByTags'
    package: '@azure/storage-blob'
    summary: |
      Returns an async iterable iterator to find all blobs with specified tag
      under the specified account.
      .byPage() returns an async iterable iterator to list the blobs in pages.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function findBlobsByTags(tagFilterSqlExpression: string, options?:
        ServiceFindBlobByTagsOptions)
      parameters:
        - id: tagFilterSqlExpression
          type: string
          description: >-
            The where parameter enables the caller to query blobs whose tags
            match a given expression.
                                                    The given expression must evaluate to true for a blob to be returned in the results.
                                                    The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;
                                                    however, only a subset of the OData filter syntax is supported in the Blob service.
        - id: options
          type: <xref uid="@azure/storage-blob.ServiceFindBlobByTagsOptions" />
          description: |
            Options to find blobs by tags.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/storage-blob.FilterBlobItem" />, <xref
          uid="@azure/storage-blob.ServiceFindBlobsByTagsSegmentResponse" />&gt;
        description: ''
  - name: 'fromConnectionString(string, StoragePipelineOptions)'
    uid: '@azure/storage-blob.BlobServiceClient.fromConnectionString'
    package: '@azure/storage-blob'
    summary: Creates an instance of BlobServiceClient from connection string.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function fromConnectionString(connectionString: string, options?:
        StoragePipelineOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            Account connection string or a SAS connection string of an Azure
            storage account.
                                             [ Note - Account connection string can only be used in NODE.JS runtime. ]
                                             Account connection string example -
                                             `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`
                                             SAS connection string example -
                                             `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`
        - id: options
          type: <xref uid="@azure/storage-blob.StoragePipelineOptions" />
          description: |
            Optional. Options to configure the HTTP pipeline.
      return:
        type: <xref uid="@azure/storage-blob.BlobServiceClient" />
        description: ''
  - name: >-
      generateAccountSasUrl(Date, AccountSASPermissions, string,
      ServiceGenerateAccountSasUrlOptions)
    uid: '@azure/storage-blob.BlobServiceClient.generateAccountSasUrl'
    package: '@azure/storage-blob'
    summary: >
      Only available for BlobServiceClient constructed with a shared key
      credential.

      Generates a Blob account Shared Access Signature (SAS) URI based on the
      client properties

      and parameters passed in. The SAS is signed by the shared key credential
      of the client.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function generateAccountSasUrl(expiresOn?: Date, permissions?:
        AccountSASPermissions, resourceTypes?: string, options?:
        ServiceGenerateAccountSasUrlOptions)
      parameters:
        - id: expiresOn
          type: Date
          description: >-
            Optional. The time at which the shared access signature becomes
            invalid. Default to an hour later if not provided.
        - id: permissions
          type: <xref uid="@azure/storage-blob.AccountSASPermissions" />
          description: Specifies the list of permissions to be associated with the SAS.
        - id: resourceTypes
          type: string
          description: >-
            Specifies the resource types associated with the shared access
            signature.
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.ServiceGenerateAccountSasUrlOptions"
            />
          description: Optional parameters.
      return:
        type: string
        description: >-
          An account SAS URI consisting of the URI to the resource represented
          by this client, followed by the generated SAS token.
  - name: getAccountInfo(ServiceGetAccountInfoOptions)
    uid: '@azure/storage-blob.BlobServiceClient.getAccountInfo'
    package: '@azure/storage-blob'
    summary: >-
      The Get Account Information operation returns the sku name and account
      kind

      for the specified account.

      The Get Account Information operation is available on service versions
      beginning

      with version 2018-03-28.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getAccountInfo(options?: ServiceGetAccountInfoOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ServiceGetAccountInfoOptions" />
          description: Options to the Service Get Account Info operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ServiceGetAccountInfoResponse" />&gt;
        description: Response data for the Service Get Account Info operation.
  - name: getBlobBatchClient()
    uid: '@azure/storage-blob.BlobServiceClient.getBlobBatchClient'
    package: '@azure/storage-blob'
    summary: Creates a BlobBatchClient object to conduct batch operations.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getBlobBatchClient()
      return:
        type: <xref uid="@azure/storage-blob.BlobBatchClient" />
        description: A new BlobBatchClient object for this service.
  - name: getContainerClient(string)
    uid: '@azure/storage-blob.BlobServiceClient.getContainerClient'
    package: '@azure/storage-blob'
    summary: 'Creates a <xref:ContainerClient> object'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getContainerClient(containerName: string)'
      parameters:
        - id: containerName
          type: string
          description: A container name
      return:
        type: <xref uid="@azure/storage-blob.ContainerClient" />
        description: >-
          A new ContainerClient object for the given container name.


          Example usage:


          ```js

          const containerClient =
          blobServiceClient.getContainerClient("<container name>");

          ```
  - name: getProperties(ServiceGetPropertiesOptions)
    uid: '@azure/storage-blob.BlobServiceClient.getProperties'
    package: '@azure/storage-blob'
    summary: >-
      Gets the properties of a storage account’s Blob service, including
      properties

      for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getProperties(options?: ServiceGetPropertiesOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ServiceGetPropertiesOptions" />
          description: Options to the Service Get Properties operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ServiceGetPropertiesResponse" />&gt;
        description: Response data for the Service Get Properties operation.
  - name: getStatistics(ServiceGetStatisticsOptions)
    uid: '@azure/storage-blob.BlobServiceClient.getStatistics'
    package: '@azure/storage-blob'
    summary: >-
      Retrieves statistics related to replication for the Blob service. It is
      only

      available on the secondary location endpoint when read-access
      geo-redundant

      replication is enabled for the storage account.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function getStatistics(options?: ServiceGetStatisticsOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ServiceGetStatisticsOptions" />
          description: Options to the Service Get Statistics operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ServiceGetStatisticsResponse" />&gt;
        description: Response data for the Service Get Statistics operation.
  - name: 'getUserDelegationKey(Date, Date, ServiceGetUserDelegationKeyOptions)'
    uid: '@azure/storage-blob.BlobServiceClient.getUserDelegationKey'
    package: '@azure/storage-blob'
    summary: >
      ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).

      Retrieves a user delegation key for the Blob service. This is only a valid
      operation when using

      bearer token authentication.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getUserDelegationKey(startsOn: Date, expiresOn: Date, options?:
        ServiceGetUserDelegationKeyOptions)
      parameters:
        - id: startsOn
          type: Date
          description: >-
            The start time for the user delegation SAS. Must be within 7 days of
            the current time
        - id: expiresOn
          type: Date
          description: >
            The end time for the user delegation SAS. Must be within 7 days of
            the current time
        - id: options
          type: >-
            <xref uid="@azure/storage-blob.ServiceGetUserDelegationKeyOptions"
            />
          description: ''
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ServiceGetUserDelegationKeyResponse" />&gt;
        description: ''
  - name: listContainers(ServiceListContainersOptions)
    uid: '@azure/storage-blob.BlobServiceClient.listContainers'
    package: '@azure/storage-blob'
    summary: >
      Returns an async iterable iterator to list all the containers

      under the specified account.

      .byPage() returns an async iterable iterator to list the containers in
      pages.


      Example using `for await` syntax:


      ```js

      let i = 1;

      for await (const container of blobServiceClient.listContainers()) {
        console.log(`Container ${i++}: ${container.name}`);
      }

      ```


      Example using `iter.next()`:


      ```js

      let i = 1;

      const iter = blobServiceClient.listContainers();

      let containerItem = await iter.next();

      while (!containerItem.done) {
        console.log(`Container ${i++}: ${containerItem.value.name}`);
        containerItem = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      // passing optional maxPageSize in the page settings

      let i = 1;

      for await (const response of blobServiceClient.listContainers().byPage({
      maxPageSize: 20 })) {
        if (response.containerItems) {
          for (const container of response.containerItems) {
            console.log(`Container ${i++}: ${container.name}`);
          }
        }
      }

      ```


      Example using paging with a marker:


      ```js

      let i = 1;

      let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2
      });

      let response = (await iterator.next()).value;


      // Prints 2 container names

      if (response.containerItems) {
        for (const container of response.containerItems) {
          console.log(`Container ${i++}: ${container.name}`);
        }
      }


      // Gets next marker

      let marker = response.continuationToken;

      // Passing next marker as continuationToken

      iterator = blobServiceClient
        .listContainers()
        .byPage({ continuationToken: marker, maxPageSize: 10 });
      response = (await iterator.next()).value;


      // Prints 10 container names

      if (response.containerItems) {
        for (const container of response.containerItems) {
           console.log(`Container ${i++}: ${container.name}`);
        }
      }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listContainers(options?: ServiceListContainersOptions)'
      parameters:
        - id: options
          type: <xref uid="@azure/storage-blob.ServiceListContainersOptions" />
          description: Options to list containers.
      return:
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/storage-blob.ContainerItem" />, <xref
          uid="@azure/storage-blob.ServiceListContainersSegmentResponse" />&gt;
        description: An asyncIterableIterator that supports paging.
  - name: 'setProperties(BlobServiceProperties, ServiceSetPropertiesOptions)'
    uid: '@azure/storage-blob.BlobServiceClient.setProperties'
    package: '@azure/storage-blob'
    summary: >-
      Sets properties for a storage account’s Blob service endpoint, including
      properties

      for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft
      delete settings.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function setProperties(properties: BlobServiceProperties, options?:
        ServiceSetPropertiesOptions)
      parameters:
        - id: properties
          type: <xref uid="@azure/storage-blob.BlobServiceProperties" />
          description: '-'
        - id: options
          type: <xref uid="@azure/storage-blob.ServiceSetPropertiesOptions" />
          description: Options to the Service Set Properties operation.
      return:
        type: >-
          Promise&lt;<xref
          uid="@azure/storage-blob.ServiceSetPropertiesResponse" />&gt;
        description: Response data for the Service Set Properties operation.
  - name: 'undeleteContainer(string, string, ServiceUndeleteContainerOptions)'
    uid: '@azure/storage-blob.BlobServiceClient.undeleteContainer'
    package: '@azure/storage-blob'
    summary: >-
      Restore a previously deleted Blob container.

      This API is only functional if Container Soft Delete is enabled for the
      storage account associated with the container.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function undeleteContainer(deletedContainerName: string,
        deletedContainerVersion: string, options?:
        ServiceUndeleteContainerOptions)
      parameters:
        - id: deletedContainerName
          type: string
          description: Name of the previously deleted container.
        - id: deletedContainerVersion
          type: string
          description: >-
            Version of the previously deleted container, used to uniquely
            identify the deleted container.
        - id: options
          type: <xref uid="@azure/storage-blob.ServiceUndeleteContainerOptions" />
          description: Options to configure Container Restore operation.
      return:
        type: Promise&lt;Object&gt;
        description: Container deletion response.
extends: <xref uid="@azure/storage-blob.StorageClient" />
